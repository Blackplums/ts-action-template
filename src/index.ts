import * as core from "@actions/core";
import * as github from "@actions/github";

export interface CreateCommentParams {
	issue_number: number;
	owner: string;
	repo: string;
	body: string;
}

export interface CoreLike {
	getInput(name: string): string;
	setFailed(msg: string): void;
	setOutput(name: string, value: unknown): void;
}

export interface GithubLike {
	context: {
		payload: {
			pull_request?: {
				[key: string]: unknown;
				number: number;
				user: { login: string };
				title: string;
			};
		};
		repo: { owner: string; repo: string };
	};
	getOctokit(token: string): {
		rest: {
			issues: {
				createComment: (
					params: CreateCommentParams,
				) => Promise<{ data: { id: number } }>;
			};
		};
	};
}

export const formatPrComment = (
	prNumber: number,
	author: string,
	title: string,
): string => {
	return `ðŸ¤– **GitHub Action Bot**

**Pull Request Summary:**
- **PR #${prNumber}** by @${author}
- **Title:** ${title}
- **Status:** Ready for review
- **Triggered by:** GitHub Actions workflow

_This comment was automatically generated by a GitHub Action._`;
};

export async function run(
	coreLib: CoreLike = core,
	githubLib: GithubLike = github as unknown as GithubLike,
) {
	try {
		const githubToken = coreLib.getInput("github-token");

		const { context } = githubLib;
		const pullRequest = context.payload.pull_request;

		if (!pullRequest) {
			coreLib.setFailed("This action only runs on pull requests");
			return;
		}

		// Format a helpful PR comment with GitHub context
		const commentBody = formatPrComment(
			pullRequest.number,
			pullRequest.user.login,
			pullRequest.title,
		);

		const octokit = githubLib.getOctokit(githubToken);

		const comment = await octokit.rest.issues.createComment({
			issue_number: pullRequest.number,
			owner: context.repo.owner,
			repo: context.repo.repo,
			body: commentBody,
		});

		coreLib.setOutput("comment-id", comment.data.id);
	} catch (error) {
		if (error instanceof Error) {
			coreLib.setFailed(error.message);
		} else {
			coreLib.setFailed(String(error));
		}
		console.error(error);
	}
}

/* c8 ignore next 3 */
if (process.env.NODE_ENV !== "test") {
	void run();
}
